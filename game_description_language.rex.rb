#
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.0
# from lexical definition file "game_description_language.rex".
#

require 'racc/parser'
class GameDescriptionLanguage < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/or\s+/))
           @rex_tokens.push action {[:OR,    text.strip]}

        when (text = ss.scan(/role\s+/))
           @rex_tokens.push action {[:ROLE,  text.strip]}

        when (text = ss.scan(/init\s+/))
           @rex_tokens.push action {[:INIT,  text.strip]}

        when (text = ss.scan(/true\s+/))
           @rex_tokens.push action {[:TRUE,  text.strip]}

        when (text = ss.scan(/does\s+/))
           @rex_tokens.push action {[:DOES,  text.strip]}

        when (text = ss.scan(/next\s+/))
           @rex_tokens.push action {[:NEXT,  text.strip]}

        when (text = ss.scan(/legal\s+/))
           @rex_tokens.push action {[:LEGAL, text.strip]}

        when (text = ss.scan(/goal\s+/))
           @rex_tokens.push action {[:GOAL,  text.strip]}

        when (text = ss.scan(/not\s+/))
           @rex_tokens.push action {[:NOT,   text.strip]}

        when (text = ss.scan(/terminal\s+/))
           @rex_tokens.push action {[:TERMINAL, text.strip]}

        when (text = ss.scan(/distinct\s+/))
           @rex_tokens.push action {[:DIST,     text.strip]}

        when (text = ss.scan(/<=/))
           @rex_tokens.push action {[:RELATION, text]}

        when (text = ss.scan(/\(/))
           @rex_tokens.push action {[:OP, text]}

        when (text = ss.scan(/\)/))
           @rex_tokens.push action {[:CP, text]}

        when (text = ss.scan(/[[:alnum:]\?\+\-\_\#\|\<\>]+/))
           @rex_tokens.push action {[:ATOM, text]}

        when (text = ss.scan(/\s+/))
          ;

        when (text = ss.scan(/;.*/))
          ;

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
